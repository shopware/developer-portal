name: Build and deploy
concurrency: single

on:
  workflow_dispatch:
    inputs:
      source:
        description: 'Source of event'
        required: false
        default: 'No source specified'
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-cli:
    name: Test CLI
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Prepare
        uses: ./.github/actions/checkout-install

      - name: Test CLI
        env:
          GITLAB_FRONTENDS_USERNAME: ${{ secrets.GITLAB_FRONTENDS_USERNAME }}
          GITLAB_FRONTENDS_ACCESS_KEY: ${{ secrets.GITLAB_FRONTENDS_ACCESS_KEY }}
          FIGMA_TOKEN: ${{ secrets.FIGMA_TOKEN }}
          FIGMA_FILE: ${{ secrets.FIGMA_FILE }}
        run: pnpm test:cli

  embed-docs:
    name: Embed docs
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Prepare
        uses: ./.github/actions/checkout-install

      # @T00D00 - "pnpm run build" fails with symlinks
      - name: Clone sub-docs
        env:
          GITLAB_FRONTENDS_USERNAME: ${{ secrets.GITLAB_FRONTENDS_USERNAME }}
          GITLAB_FRONTENDS_ACCESS_KEY: ${{ secrets.GITLAB_FRONTENDS_ACCESS_KEY }}
          FIGMA_TOKEN: ${{ secrets.FIGMA_TOKEN }}
          FIGMA_FILE: ${{ secrets.FIGMA_FILE }}
        run: |
          chmod +x ./.github/scripts/embed.sh
          .github/scripts/embed.sh
          ls -la ../..
          ls -la ..
          ls -la .
          ls -la ./src
          ls -la ./src/resources

      - name: Zip folder
        run: zip -r embed.zip ./src/

      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: embed-${{ github.sha }}
          path: embed.zip

  test-dev:
    name: Test dev
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: embed-docs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Prepare
        uses: ./.github/actions/checkout-install

      - uses: actions/download-artifact@v3
        with:
          name: embed-${{ github.sha }}

      - name: Unzip artifact
        run: |
          unzip -o embed.zip

      - name: Test
        run: pnpm run test

  test-build:
    name: Test build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: embed-docs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Prepare
        uses: ./.github/actions/checkout-install

      - uses: actions/download-artifact@v3
        with:
          name: embed-${{ github.sha }}

      - name: Unzip artifact
        run: |
          unzip -o embed.zip

      - name: Build project
        run: pnpm run build

      - name: Test
        run: pnpm run test:build

      - name: Zip folder
        run: zip -r full-build.zip .vitepress/dist/

      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: full-build-${{ github.sha }}
          path: full-build.zip

  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      - test-cli
      - test-dev
      - test-build
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: full-build-${{ github.sha }}

      - name: Unzip artifact
        run: |
          mkdir -p .vitepress/dist
          unzip full-build.zip
          ls -la .vitepress/dist

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: |
          VERCEL_ENV="preview"
          if [[ "${{github.ref}}" == "refs/heads/main" ]]; then
            VERCEL_ENV="production"
          fi
          
          vercel pull --yes --environment=$VERCEL_ENV --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }}

      - name: Build Project Artifacts
        run: vercel build ./.vitepress/dist --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > ./vercel.env

      - name: Vercel URL
        run: cat ./vercel.env
