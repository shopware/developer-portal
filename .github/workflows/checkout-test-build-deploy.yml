name: Build and deploy

on:
  workflow_dispatch:
    inputs:
      source:
        description: 'Source of event'
        required: false
        default: 'No source specified'
  push:
    paths:
      - 'src/*'
      - 'cli/*'
      - '.github/workflows/*'
  pull_request:
    branches:
      - main

jobs:
  checkout:
    name: Checkout
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7

      - name: Install system
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3 \
            libnspr4 \
            libatk1.0-0 \
            libatk-bridge2.0-0 \
            libcups2 \
            libdrm2 \
            libatspi2.0-0 \
            libxcomposite1 \
            libxdamage1 \
            libxfixes3 \
            libxrandr2 \
            libgbm1 \
            libxkbcommon0 \
            libasound2

      - name: Install dependencies
        run: pnpm i && cd cli && pnpm i

      - name: Build CLI
        run: pnpm cli:build
        #run: cd ./cli && pnpm run build && pnpm run pkg && cd ..

      - name: Test CLI
        env:
          GITLAB_FRONTENDS_USERNAME: ${{ secrets.GITLAB_FRONTENDS_USERNAME }}
          GITLAB_FRONTENDS_ACCESS_KEY: ${{ secrets.GITLAB_FRONTENDS_ACCESS_KEY }}
          FIGMA_TOKEN: ${{ secrets.FIGMA_TOKEN }}
          FIGMA_FILE: ${{ secrets.FIGMA_FILE }}
        run: pnpm test:cli

      # @T00D00 - "pnpm run build" fails with symlinks
      - name: Clone sub-docs
        env:
          GITLAB_FRONTENDS_USERNAME: ${{ secrets.GITLAB_FRONTENDS_USERNAME }}
          GITLAB_FRONTENDS_ACCESS_KEY: ${{ secrets.GITLAB_FRONTENDS_ACCESS_KEY }}
          FIGMA_TOKEN: ${{ secrets.FIGMA_TOKEN }}
          FIGMA_FILE: ${{ secrets.FIGMA_FILE }}
        run: |
          chmod +x ./.github/scripts/embed.sh
          .github/scripts/embed.sh
          ls -la ../..
          ls -la ..
          ls -la .
          ls -la ./src
          ls -la ./src/resources

      #- name: Get pnpm store directory
      #  id: pnpm-cache
      #  shell: bash
      #  run: |
      #    echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      #- uses: actions/cache@v3
      #  name: Setup pnpm cache
      #  with:
      #    path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
      #    key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      #    restore-keys: |
      #      ${{ runner.os }}-pnpm-store-

#      - name: Zip folder
#        run: zip -r full-checkout.zip .

#      - uses: actions/upload-artifact@v3
#        with:
#          name: full-checkout
#          path: full-checkout.zip

#  test:
#    name: Test
#    runs-on: ubuntu-latest
#    timeout-minutes: 5
#    needs: checkout
#    steps:

#      - uses: actions/download-artifact@v3
#        with:
#          name: full-checkout

#      - name: Install Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18

#      - name: Install pnpm
#        uses: pnpm/action-setup@v2
#        with:
#          version: 7

      - name: Test
        run: pnpm run test

#  build:
#    name: Build VitePress
#    runs-on: ubuntu-latest
#    timeout-minutes: 5
#    needs: checkout
#    steps:

#      - uses: actions/download-artifact@v3
#        with:
#          name: full-checkout

#      - name: Unzip artifact
#        run: unzip full-checkout.zip

#      - name: Install Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18

#      - name: Install pnpm
#        uses: pnpm/action-setup@v2
#        with:
#          version: 7

      - name: Build project
        run: pnpm run build

      - name: Test
        run: pnpm run test:build

      - name: Zip folder
        run: zip -r full-build.zip .vitepress/dist/

      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: full-build-${{ github.sha }}
          path: full-build.zip

  deploy-vercel:
    name: Deploy to Vercel
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: checkout
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
    steps:

      - uses: actions/download-artifact@v3
        with:
          name: full-build-${{ github.sha }}

      - name: Unzip artifact
        run: |
          mkdir -p .vitepress/dist
          unzip full-build.zip
          ls -la .vitepress/dist

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }}

      - name: Build Project Artifacts
        run: vercel build ./.vitepress/dist --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > ./vercel.env

      - name: Vercel URL
        run: cat ./vercel.env

  deploy:
    name: Deploy build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    #needs: [test, build]
    needs: checkout
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
    steps:

      - uses: actions/download-artifact@v3
        with:
          name: full-build-${{ github.sha }}

      - name: Unzip artifact
        run: |
          mkdir -p .vitepress/dist
          unzip full-build.zip
          ls -la .vitepress/dist

      - uses: jakejarvis/s3-sync-action@master
        with:
          # args: --acl public-read --follow-symlinks --delete
          args: --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.STAGING_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.STAGING_S3_BUCKET_REGION }}
          SOURCE_DIR: '.vitepress/dist'

      # Invalidate Cloudfront (this action)
      - name: invalidate
        uses: chetan/invalidate-cloudfront-action@master
        env:
          DISTRIBUTION: ${{ secrets.STAGING_CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: '/*'
          AWS_REGION: ${{ secrets.STAGING_S3_BUCKET_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}