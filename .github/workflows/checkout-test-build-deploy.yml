name: Build and deploy

on:
  workflow_dispatch:
    inputs:
      source:
        description: 'Source of event'
        required: false
        default: 'No source specified'
  push:
    paths:
      - 'src/*'
      - '.github/scripts/embed.sh'
      - '.github/workflows/*'
  pull_request:
    branches:
      - main

jobs:
  checkout:
    name: Checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 6.0.2

      # @T00D00 - "pnpm run build" fails with symlinks
      #- name: Clone sub-docs
      #  run: sh ./.github/scripts/embed.sh

      #- name: Get pnpm store directory
      #  id: pnpm-cache
      #  shell: bash
      #  run: |
      #    echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      #- uses: actions/cache@v3
      #  name: Setup pnpm cache
      #  with:
      #    path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
      #    key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      #    restore-keys: |
      #      ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm i

#      - name: Zip folder
#        run: zip -r full-checkout.zip .

#      - uses: actions/upload-artifact@v3
#        with:
#          name: full-checkout
#          path: full-checkout.zip

#  test:
#    name: Test
#    runs-on: ubuntu-latest
#    needs: checkout
#    steps:

#      - uses: actions/download-artifact@v3
#        with:
#          name: full-checkout

#  build:
#    name: Build VitePress
#    runs-on: ubuntu-latest
#    needs: checkout
#    steps:

#      - uses: actions/download-artifact@v3
#        with:
#          name: full-checkout

#      - name: Unzip artifact
#        run: unzip full-checkout.zip

#      - name: Install Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18

#      - name: Install pnpm
#        uses: pnpm/action-setup@v2
#        with:
#          version: 6.0.2

      - name: Build project
        run: pnpm run build

      - name: Zip folder
        run: zip -r full-build.zip .vitepress/dist/

      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: full-build-${{ github.sha }}
          path: full-build.zip

  deploy:
    name: Deploy build
    runs-on: ubuntu-latest
#    needs: [test, build]
    needs: checkout
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
    steps:

      - uses: actions/download-artifact@v3
        with:
          name: full-build-${{ github.sha }}

      - name: Unzip artifact
        run: |
          mkdir -p .vitepress/dist
          unzip full-build.zip
          ls -la .vitepress/dist

      #- name: Deploy
      #  uses: reggionick/s3-deploy@v3
      #  with:
      #    folder: .vitepress/dist
      #    bucket: ${{ secrets.STAGING_S3_BUCKET }}
      #    bucket-region: ${{ secrets.STAGING_S3_BUCKET_REGION }}
      #    dist-id: ${{ secrets.STAGING_CLOUDFRONT_DISTRIBUTION_ID }}
      #    invalidation: /
      #    delete-removed: true
      #    no-cache: true
      #    #private: false
      #    filesToInclude: ".*/*,*/*,**"

      - uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.STAGING_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.STAGING_S3_BUCKET_REGION }}
          SOURCE_DIR: '.vitepress/dist'

      # Invalidate Cloudfront (this action)
      - name: invalidate
        uses: chetan/invalidate-cloudfront-action@master
        env:
          DISTRIBUTION: ${{ secrets.STAGING_CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: '/*'
          AWS_REGION: ${{ secrets.STAGING_S3_BUCKET_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}