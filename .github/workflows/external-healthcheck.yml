name: External healthcheck
run-name: External healthcheck - ${{ inputs.branch }} @ ${{ inputs.owner }}/${{ inputs.repo }}
concurrency:
  group: ${{ github.workflow }}-${{ inputs.branch }}-${{ inputs.owner }}-${{ inputs.repo }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      owner:
        description: "Owner to checkout"
        required: true
        type: string
      repo:
        description: "Repo to checkout"
        required: true
        type: string
      branch:
        description: "Branch to checkout"
        required: true
        type: string
      sha:
        description: "Commit to checkout"
        required: true
        type: string
      check:
        description: "Check ID"
        required: true
        type: number

jobs:

  trigger-build:
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.status.outputs.success }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Print inputs
        run: |
          echo "branch=${{ inputs.branch }}"
          echo "repo=${{ inputs.repo }}"
          echo "sha=${{ inputs.sha }}"
          echo "owner=${{ inputs.owner }}"
          echo "check=${{ inputs.check }}"

      - name: Configure mountpoints
        run: |
          
          ORG=${{ inputs.owner }}
          BRANCH=${{ inputs.branch }}
          BRANCH=$(printf '%s' "$BRANCH" | sed 's/\//\\\//g')
          
          if [[ "${{ inputs.repo }}" == "frontends" ]]; then
            echo "Embedding frontends"
            sed -i "0,/ORG_FRONTENDS.*/s/.*ORG_FRONTENDS.*/ORG_FRONTENDS=$ORG/" ./.github/scripts/embed.sh
            sed -i "0,/BRANCH_FRONTENDS.*/s/.*BRANCH_FRONTENDS.*/BRANCH_FRONTENDS=$BRANCH/" ./.github/scripts/embed.sh
          
          elif [[ "${{ inputs.repo }}" == "admin-extension-sdk" ]]; then
            echo "Embedding admin-extension-sdk"
            sed -i "0,/ORG_ADMIN_EXTENSION_SDK.*/s/.*ORG_ADMIN_EXTENSION_SDK.*/ORG_ADMIN_EXTENSION_SDK=$ORG/" ./.github/scripts/embed.sh
            sed -i "0,/BRANCH_ADMIN_EXTENSION_SDK.*/s/.*BRANCH_ADMIN_EXTENSION_SDK.*/BRANCH_ADMIN_EXTENSION_SDK=$BRANCH/" ./.github/scripts/embed.sh
          
          elif [[ "${{ inputs.repo }}" == "meteor-icon-kit" ]]; then
            echo "Embedding meteor-icon-kit"
            sed -i "0,/ORG_METEOR_ICON_KIT.*/s/.*ORG_METEOR_ICON_KIT.*/ORG_METEOR_ICON_KIT=$ORG/" ./.github/scripts/embed.sh
            sed -i "0,/BRANCH_METEOR_ICON_KIT.*/s/.*BRANCH_METEOR_ICON_KIT.*/BRANCH_METEOR_ICON_KIT=$BRANCH/" ./.github/scripts/embed.sh
          
          elif [[ "${{ inputs.repo }}" == "meteor-component-library" ]]; then
            echo "Embedding meteor-component-library"
            sed -i "0,/ORG_METEOR_COMPONENT_LIBRARY.*/s/.*ORG_METEOR_COMPONENT_LIBRARY.*/ORG_METEOR_COMPONENT_LIBRARY=$ORG/" ./.github/scripts/embed.sh
            sed -i "0,/BRANCH_METEOR_COMPONENT_LIBRARY.*/s/.*BRANCH_METEOR_COMPONENT_LIBRARY.*/BRANCH_METEOR_COMPONENT_LIBRARY=$BRANCH/" ./.github/scripts/embed.sh
          
          elif [[ "${{ inputs.repo }}" == "docs" ]]; then
            echo "Embedding docs"
            sed -i "0,/ORG_DOCS.*/s/.*ORG_DOCS.*/ORG_DOCS=$ORG/" ./.github/scripts/embed.sh
            sed -i "0,/BRANCH_DOCS.*/s/.*BRANCH_DOCS.*/BRANCH_DOCS=$BRANCH/" ./.github/scripts/embed.sh
          
          elif [[ "${{ inputs.repo }}" == "release-notes" ]]; then
            echo "Embedding release-notes"
            sed -i "0,/ORG_RELEASE_NOTES.*/s/.*ORG_RELEASE_NOTES.*/ORG_RELEASE_NOTES=$ORG/" ./.github/scripts/embed.sh
            sed -i "0,/BRANCH_RELEASE_NOTES.*/s/.*BRANCH_RELEASE_NOTES.*/BRANCH_RELEASE_NOTES=$BRANCH/" ./.github/scripts/embed.sh
          
          elif [[ "${{ inputs.repo }}" == "developer-portal" ]]; then
            echo "Embedding developer-portal, default (unchanged) setup"
          
          else
            echo "Unknown repository ${{inputs.repo}}"
           echo "Branch ${{inputs.branch}}"
            exit 1
          fi
          
          cat ./.github/scripts/embed.sh

      - name: Prepare
        uses: ./.github/actions/checkout-install
        with:
          apt: true

      - name: Embed repos
        env:
          GITLAB_FRONTENDS_USERNAME: ${{ secrets.GITLAB_FRONTENDS_USERNAME }}
          GITLAB_FRONTENDS_ACCESS_KEY: ${{ secrets.GITLAB_FRONTENDS_ACCESS_KEY }}
          FIGMA_TOKEN: ${{ secrets.FIGMA_TOKEN }}
          FIGMA_FILE: ${{ secrets.FIGMA_FILE }}
        run: |
          chmod +x ./.github/scripts/embed.sh
          .github/scripts/embed.sh

      - name: Test dev
        run: |
          export NODE_OPTIONS="--max-old-space-size=8096"
          pnpm run test || echo "DEV TEST FAILED"

      - name: Build
        run: |
          export NODE_OPTIONS="--max-old-space-size=8096"
          export USERCENTRICS="65ynhGFvE"
          pnpm run build

      - name: Zip folder
        run: zip -r full-build.zip .vitepress/dist/ vercel.json

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: full-build-${{ github.sha }}
          path: full-build.zip

      - name: Test build
        run: |
          export NODE_OPTIONS="--max-old-space-size=8096"
          pnpm run test:build

      - name: Mark as successful
        id: status
        run: |
          echo "success=yes" >> "$GITHUB_OUTPUT"

  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs:
      - trigger-build
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: full-build-${{ github.sha }}

      - name: Unzip artifact
        run: |
          mkdir -p .vitepress/dist
          unzip -o full-build.zip
          ls -la .vitepress/dist

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: |
          VERCEL_ENV="preview"
          VERCEL_ENV_FLAG=""
          
          vercel pull --yes --environment=$VERCEL_ENV --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }}
          vercel build ./.vitepress/dist --token=${{ secrets.VERCEL_TOKEN }} $VERCEL_ENV_FLAG
          vercel deploy --prebuilt --archive=tgz --token=${{ secrets.VERCEL_TOKEN }} $VERCEL_ENV_FLAG > ./vercel.env
